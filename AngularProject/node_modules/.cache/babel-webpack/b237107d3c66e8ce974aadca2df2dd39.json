{"ast":null,"code":"import { throwError } from 'rxjs';\nimport jwt_decode from 'jwt-decode';\nimport { AppConstants } from '../app.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nconst baseURL = `${AppConstants.SERVICES_BASE_URL}/login`;\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, jwtHelper) {\n      this.http = http;\n      this.jwtHelper = jwtHelper;\n    }\n\n    authenticate(loginData) {\n      return this.http.post(baseURL, loginData);\n    }\n\n    logout() {\n      localStorage.setItem(AppConstants.LOGIN_STORAGE, '');\n    }\n\n    get Token() {\n      return JSON.stringify(localStorage.getItem('token') || '');\n    }\n\n    isAuthenticated() {\n      let login;\n      let loginStr = localStorage.getItem(AppConstants.LOGIN_STORAGE);\n\n      if (loginStr !== '' && loginStr !== null && loginStr !== undefined) {\n        login = JSON.parse(loginStr);\n      } else {\n        return false;\n      }\n\n      const token = login.token;\n      let tokenExpired = false; // Check whether the token is expired and return\n      // true or false\n\n      if (this.jwtHelper.isTokenExpired(token)) {\n        localStorage.setItem(AppConstants.LOGIN_STORAGE, '');\n        tokenExpired = true;\n      }\n\n      return !tokenExpired;\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        //    A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        //     // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned error: ${JSON.stringify(error)}`);\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${JSON.stringify(error.error)}`);\n      } //  return an observable with a user-facing error message\n\n\n      return throwError(error);\n    }\n\n    getTokenDetails() {\n      let token = localStorage.getItem('token');\n\n      if (token) {\n        let token_final = this.getDecodedAccessToken(token);\n        return token_final;\n      }\n    }\n\n    getDecodedAccessToken(token) {\n      try {\n        return jwt_decode(token);\n      } catch (Error) {\n        return null;\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ofType, createEffect } from '@ngrx/effects';\nimport { switchMap, map, mergeMap } from 'rxjs/operators';\nimport { AddCartItemAction, AddCartItemActionSuccess, DeleteCartItem, DeleteCartItemSuccess, GetCartItemAction, GetCartItemActionSuccess, GetCartTotalAction, GetCartTotalActionSuccess } from '../actions/cart.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/cart.service\";\nexport let CartEffects = /*#__PURE__*/(() => {\n  class CartEffects {\n    constructor(actions$, cart_service) {\n      this.actions$ = actions$;\n      this.cart_service = cart_service;\n      this.AddCartItem$ = createEffect(() => {\n        return this.actions$.pipe(ofType(AddCartItemAction), mergeMap(action => {\n          return this.cart_service.addCartItem(action.item, action.id).pipe(map((data, id) => {\n            return AddCartItemActionSuccess({\n              item: data,\n              id: id\n            });\n          }));\n        }));\n      });\n      this.GetCartItem$ = createEffect(() => {\n        return this.actions$.pipe(ofType(GetCartItemAction), switchMap(() => {\n          return this.cart_service.getAllCartItems().pipe(map(data => {\n            return GetCartItemActionSuccess({\n              item: data\n            });\n          }));\n        }));\n      });\n      this.DeleteCartItem$ = createEffect(() => {\n        return this.actions$.pipe(ofType(DeleteCartItem), switchMap(action => {\n          return this.cart_service.DeleteCartItem(action.id).pipe(map(data => {\n            return DeleteCartItemSuccess({\n              item: data\n            });\n          }));\n        }));\n      });\n      this.GetSumAllProductsCart$ = createEffect(() => {\n        return this.actions$.pipe(ofType(GetCartTotalAction), switchMap(action => {\n          return this.cart_service.getSumPriceCart().pipe(map(data => {\n            return GetCartTotalActionSuccess({\n              total: data\n            });\n          }));\n        }));\n      });\n    }\n\n  }\n\n  CartEffects.ɵfac = function CartEffects_Factory(t) {\n    return new (t || CartEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.CartService));\n  };\n\n  CartEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartEffects,\n    factory: CartEffects.ɵfac\n  });\n  return CartEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { switchMap, map, filter } from 'rxjs/operators';\nimport { ROUTER_NAVIGATION } from '@ngrx/router-store';\nimport { ShowAllProductsAction, GetProductsAction, GetSingleProductAction, ProductsTypeActionSuccess, ProductsTypeAction } from '../actions/products.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/products.service\";\nexport let ProductsEffect = /*#__PURE__*/(() => {\n  class ProductsEffect {\n    constructor(actions$, products_service) {\n      this.actions$ = actions$;\n      this.products_service = products_service;\n      this.loadAllProducts$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ShowAllProductsAction), switchMap(() => this.products_service.getAll()), switchMap(productsResp => of(GetProductsAction({\n          products: productsResp\n        }))));\n      });\n      this.loadSingleProducts$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ROUTER_NAVIGATION), filter(r => {\n          return r.payload.routerState.url.startsWith('/product');\n        }), map(r => {\n          var _a;\n\n          return (_a = r.payload.routerState.root.firstChild) === null || _a === void 0 ? void 0 : _a.params['id'];\n        }), switchMap(id => {\n          return this.products_service.getSingleProduct(id).pipe(switchMap(product => of(GetSingleProductAction({\n            products: product\n          }))));\n        }));\n      });\n      this.loadProductsType$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ProductsTypeAction), switchMap(action => {\n          console.log(action);\n          return this.products_service.getProductsType(action.type_item).pipe(map(data => {\n            return ProductsTypeActionSuccess({\n              products: data\n            });\n          }));\n        }));\n      });\n    }\n\n  }\n\n  ProductsEffect.ɵfac = function ProductsEffect_Factory(t) {\n    return new (t || ProductsEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductsService));\n  };\n\n  ProductsEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductsEffect,\n    factory: ProductsEffect.ɵfac\n  });\n  return ProductsEffect;\n})();","map":null,"metadata":{},"sourceType":"module"}
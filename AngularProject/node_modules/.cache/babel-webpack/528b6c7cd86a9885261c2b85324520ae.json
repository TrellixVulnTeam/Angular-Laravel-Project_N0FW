{"ast":null,"code":"import { ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { switchMap, map, mergeMap, catchError, tap } from 'rxjs/operators';\nimport { GetUserAction, GetUserActionSuccess, UpdateUserAction, UpdateUserActionSuccess, UserLoginAction, UserLoginActionFail, UserLoginActionSuccess, UserSignUpAction, UserSignUpActionSuccess } from \"src/app/store/actions/user.actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/user.service\";\nimport * as i3 from \"src/app/auth/auth.service\";\nimport * as i4 from \"ngx-toastr\";\nimport * as i5 from \"@angular/router\";\nexport let UserEffects = /*#__PURE__*/(() => {\n  class UserEffects {\n    constructor(actions$, user_service, auth_service, toastr, router) {\n      this.actions$ = actions$;\n      this.user_service = user_service;\n      this.auth_service = auth_service;\n      this.toastr = toastr;\n      this.router = router;\n      this.UserSignUp$ = createEffect(() => {\n        return this.actions$.pipe(ofType(UserSignUpAction), switchMap(action => {\n          return this.user_service.signUp(action.user).pipe(tap(action => {\n            this.toastr.success(\"user registered\");\n          }), map(data => UserSignUpActionSuccess({\n            responseUser: data,\n            user: action.user\n          })), catchError(errorResp => {\n            console.log(errorResp);\n            return of(UserLoginActionFail({\n              responseUser: errorResp.error.message\n            })).pipe(tap(action => {\n              this.toastr.error(errorResp.error.message);\n            }));\n          }));\n        }));\n      });\n      this.UserSignIn$ = createEffect(() => {\n        return this.actions$.pipe(ofType(UserLoginAction), switchMap(action => {\n          return this.auth_service.authenticate(action.user).pipe(tap(action => {\n            this.toastr.success(\"Logged succesfully\");\n            localStorage.setItem('token', JSON.stringify(action.token.token));\n            this.router.navigate(['/']);\n          }), map(user => UserLoginActionSuccess({\n            responseUser: user,\n            user: action.user\n          })), catchError(errorResp => {\n            return of(UserLoginActionFail({\n              responseUser: errorResp.error.message\n            })).pipe(tap(action => {\n              this.toastr.error(errorResp.error.message);\n            }));\n          }));\n        }));\n      });\n      this.updateUser$ = createEffect(() => {\n        return this.actions$.pipe(ofType(UpdateUserAction), mergeMap(action => {\n          return this.user_service.updateUser(action.user).pipe(map(user => {\n            console.log(user);\n            return UpdateUserActionSuccess({\n              user: user\n            });\n          }));\n        }));\n      });\n      this.getUser$ = createEffect(() => {\n        return this.actions$.pipe(ofType(GetUserAction), mergeMap(action => {\n          return this.user_service.getUser().pipe(map(user => {\n            return GetUserActionSuccess({\n              user: user\n            });\n          }), catchError(err => {\n            return of(GetUserActionFail());\n          }));\n        }));\n      });\n    }\n\n  }\n\n  UserEffects.ɵfac = function UserEffects_Factory(t) {\n    return new (t || UserEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.AuthService), i0.ɵɵinject(i4.ToastrService), i0.ɵɵinject(i5.Router));\n  };\n\n  UserEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserEffects,\n    factory: UserEffects.ɵfac\n  });\n  return UserEffects;\n})();\n\nfunction GetUserActionFail() {\n  throw new Error(\"Function not implemented.\");\n}","map":null,"metadata":{},"sourceType":"module"}
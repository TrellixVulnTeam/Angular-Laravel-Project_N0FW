{"ast":null,"code":"import { ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { switchMap, map, tap, catchError } from 'rxjs/operators';\nimport { AddCartItemAction, AddCartItemActionFail, AddCartItemActionSuccess, DeleteCartItem, DeleteCartItemFail, DeleteCartItemSuccess, GetCartItemAction, GetCartItemActionFail, GetCartItemActionSuccess, GetCartTotalAction, GetCartTotalActionSuccess } from '../actions/cart.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/cart.service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/router\";\nexport let CartEffects = /*#__PURE__*/(() => {\n  class CartEffects {\n    constructor(actions$, cart_service, toastr, router) {\n      this.actions$ = actions$;\n      this.cart_service = cart_service;\n      this.toastr = toastr;\n      this.router = router;\n      this.AddCartItem$ = createEffect(() => {\n        return this.actions$.pipe(ofType(AddCartItemAction), switchMap(action => {\n          return this.cart_service.addCartItem(action.item, action.id).pipe(tap(action => {\n            this.toastr.info(\"item added to your cart\");\n            this.router.navigate(['/cart']);\n          }), map(data => AddCartItemActionSuccess({\n            item: data\n          })), catchError(err => {\n            return of(AddCartItemActionFail({\n              item: err.error.message\n            })).pipe(tap(action => {\n              this.router.navigate(['/signIn']);\n              this.toastr.error(err.error.message);\n            }));\n          }));\n        }));\n      });\n      this.GetCartItem$ = createEffect(() => {\n        return this.actions$.pipe(ofType(GetCartItemAction), switchMap(() => {\n          return this.cart_service.getAllCartItems().pipe(map(data => {\n            return GetCartItemActionSuccess({\n              item: data\n            });\n          }), catchError(error => {\n            return of(GetCartItemActionFail({\n              message: error.error.message\n            }));\n          }));\n        }));\n      });\n      this.DeleteCartItem$ = createEffect(() => {\n        return this.actions$.pipe(ofType(DeleteCartItem), switchMap(action => {\n          return this.cart_service.DeleteCartItem(action.id).pipe(tap(action => {\n            this.toastr.info('item deleted');\n          }), map(data => {\n            return DeleteCartItemSuccess({\n              item: data\n            });\n          }), catchError(errorResp => {\n            return of(DeleteCartItemFail({\n              message: errorResp.error.message\n            }));\n          }));\n        }));\n      });\n      this.GetSumAllProductsCart$ = createEffect(() => {\n        return this.actions$.pipe(ofType(GetCartTotalAction), switchMap(action => {\n          return this.cart_service.getSumPriceCart().pipe(map(data => {\n            return GetCartTotalActionSuccess({\n              total: data\n            });\n          }));\n        }));\n      });\n    }\n\n  }\n\n  CartEffects.ɵfac = function CartEffects_Factory(t) {\n    return new (t || CartEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.CartService), i0.ɵɵinject(i3.ToastrService), i0.ɵɵinject(i4.Router));\n  };\n\n  CartEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartEffects,\n    factory: CartEffects.ɵfac\n  });\n  return CartEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}
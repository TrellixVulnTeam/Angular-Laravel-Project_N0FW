{"ast":null,"code":"import { ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { GetProductsAction, ProductsTypeActionSuccess, ProductsTypeAction, GetSingleProductActionFail, ProductsTypeActionFail, GetSingleProductActionSuccess, GetSingleProductAction, GetProductsActionSuccess } from '../actions/products.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/products.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"@angular/router\";\nexport let ProductsEffect = /*#__PURE__*/(() => {\n  class ProductsEffect {\n    constructor(actions$, products_service, store, router) {\n      this.actions$ = actions$;\n      this.products_service = products_service;\n      this.store = store;\n      this.router = router;\n      this.loadAllProducts$ = createEffect(() => {\n        return this.actions$.pipe(ofType(GetProductsAction), switchMap(() => this.products_service.getAll()), map(productsResp => GetProductsActionSuccess({\n          products: productsResp\n        })));\n      });\n      this.loadSingleProducts$ = createEffect(() => {\n        return this.actions$.pipe(ofType(GetSingleProductAction), switchMap(action => this.products_service.getSingleProduct(action.item_id).pipe(map(product => GetSingleProductActionSuccess({\n          products: product\n        })))), catchError(errorResp => {\n          return of(GetSingleProductActionFail({\n            message: errorResp.error.message\n          }));\n        }));\n      });\n      this.loadProductsType$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ProductsTypeAction), switchMap(action => {\n          if (action.type_item == undefined || action.type_item == null) {\n            return this.products_service.getAll().pipe(map(data => {\n              return GetProductsActionSuccess({\n                products: data\n              });\n            }));\n          } else {\n            return this.products_service.getProductsType(action.type_item).pipe(map(data => {\n              return ProductsTypeActionSuccess({\n                products: data\n              });\n            }));\n          }\n        }), catchError(errorResp => {\n          return of(ProductsTypeActionFail({\n            message: errorResp.error.message\n          }));\n        }));\n      });\n    }\n\n  }\n\n  ProductsEffect.ɵfac = function ProductsEffect_Factory(t) {\n    return new (t || ProductsEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductsService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i4.Router));\n  };\n\n  ProductsEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductsEffect,\n    factory: ProductsEffect.ɵfac\n  });\n  return ProductsEffect;\n})();","map":null,"metadata":{},"sourceType":"module"}